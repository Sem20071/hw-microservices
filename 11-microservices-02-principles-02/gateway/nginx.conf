events {
    worker_connections 1024;
}

http {
    upstream security {
        server security:3000;
    }

    upstream uploader {
        server uploader:3000;
    }

    upstream storage {
        server storage:9000;
    }

    log_format json_combined escape=json
    '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status": "$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"http_x_forwarded_for":"$http_x_forwarded_for",'
        '"upstream_addr":"$upstream_addr"'
    '}';

    access_log /var/log/nginx/access.log json_combined;
    error_log /var/log/nginx/error.log warn;

    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è MinIO
    client_max_body_size 100M;
    proxy_buffering off;

    server {
        listen 8080;
        server_name localhost;

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        location = /v1/register {
            if ($request_method != POST) {
                return 405;
            }
            
            proxy_pass http://security/v1/user;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        location = /v1/token {
            if ($request_method != POST) {
                return 405;
            }
            
            proxy_pass http://security/v1/token;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # üîí –ê–ù–û–ù–ò–ú–ù–´–ô –î–û–°–¢–£–ü –ö –§–ê–ô–õ–ê–ú (–ù–û–í–´–ô –ë–õ–û–ö)
        location ~ ^/v1/public/(?<image>.+)$ {
            if ($request_method != GET) {
                return 405;
            }
            
            # –ë–ï–ó –ü–†–û–í–ï–†–ö–ò –¢–û–ö–ï–ù–ê - –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
            # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤ MinIO —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
            proxy_pass http://storage/data/$image;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è S3
            proxy_set_header X-Amz-Content-Sha256 'UNSIGNED-PAYLOAD';
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-request-id;
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            expires 1h;
            add_header Cache-Control "public";
        }

        # ==================== –ó–ê–©–ò–©–ï–ù–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ====================

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        location = /v1/user {
            if ($request_method != GET) {
                return 405;
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
            auth_request /v1/auth-validate;
            auth_request_set $auth_status $upstream_status;
            
            proxy_pass http://security/v1/user;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        location = /v1/upload {
            if ($request_method != POST) {
                return 405;
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
            auth_request /v1/auth-validate;
            auth_request_set $auth_status $upstream_status;
            
            proxy_pass http://uploader/v1/upload;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            
            proxy_request_buffering off;
            client_max_body_size 100M;
        }

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (c –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
        location ~ ^/v1/user/(?<image>.+)$ {
            if ($request_method != GET) {
                return 405;
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
            auth_request /v1/auth-validate;
            auth_request_set $auth_status $upstream_status;
            
            # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤ MinIO —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
            proxy_pass http://storage/data/$image;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            
            proxy_set_header X-Amz-Content-Sha256 'UNSIGNED-PAYLOAD';
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-request-id;
        }

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        location = /v1/auth-validate {
            internal;
            proxy_pass http://security/v1/token/validation;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Host $host;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        error_page 401 = @error401;
        location @error401 {
            return 401 '{"error": "Unauthorized", "message": "Invalid or missing token"}\n';
            add_header Content-Type application/json;
        }

        error_page 403 = @error403;
        location @error403 {
            return 403 '{"error": "Forbidden", "message": "Access denied"}\n';
            add_header Content-Type application/json;
        }

        location / {
            return 404 '{"error": "Not Found", "message": "Endpoint not found"}\n';
            add_header Content-Type application/json;
        }
    }
}